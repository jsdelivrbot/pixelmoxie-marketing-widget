// A generic mixin that is used by the `to-em()` and `to-rem()` mixins below.
//------------------------------------------------------------------------------

@mixin to-em-or-rem($unit, $properties, $sizes, $context, $sledgehammer) {

	$values: ();
	$sublists: false;
	$unit: if($unit == "em", 1em, 1rem);
	$important: if($sledgehammer, " !important", "");

	@each $s in $sizes {

		@if type-of($s) == list {

			$sublists: true;
			$vv: ();

			@each $ss in $s {
				$vv: append($vv, if(type-of($ss) == number and $ss != 0, strip-unit($ss) / strip-unit($context) * $unit, strip-unit($ss)));
			}

			$values: append($values, join((), $vv));

		} @else {
			$values: append($values, if(type-of($s) == number and $s != 0, strip-unit($s) / strip-unit($context) * $unit,
				strip-unit($s)));
		}
	}

	$value: join((), $values, if($sublists, comma, space));

	@each $prop in $properties {
		#{$prop}: $value#{$important};
	}
}

// `em`.
//------------------------------------------------------------------------------

@mixin to-em($properties, $sizes, $context: false, $sledgehammer: false) {
	$context: if($context == false or $context == "", $rem-base, $context);
	@include to-em-or-rem("em", $properties, $sizes, $context, $sledgehammer);
}

// `rem`.
//------------------------------------------------------------------------------

@mixin to-rem($properties, $sizes, $sledgehammer: false) {
	@include to-em-or-rem("rem", $properties, $sizes, $rem-base, $sledgehammer);
}
